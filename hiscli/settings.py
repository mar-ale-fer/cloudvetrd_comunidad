"""
Django settings for hiscli project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from datetime import timedelta
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '<redigi>[clave_privada]'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['cloudvet.<redigi>[tu_dominio].com','localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'django.contrib.postgres',
    'graphene_django',
    'hiscliapp',
    'corsheaders',
    #'background_task',
    'django_extensions'
]

MIDDLEWARE = [
     'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    #  'graphql_jwt.middleware.JSONWebTokenMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'crum.CurrentRequestUserMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]

CORS_ORIGIN_ALLOW_ALL = False

GRAPHQL_JWT = {
    'JWT_EXPIRATION_DELTA': timedelta(minutes=1),
    'JWT_VERIFI_EXPIRATION': True,
}

#JWT_AUTH = {
#    'JWT_EXPIRATION_DELTA': timedelta(minutes=1),
#    'JWT_VERIFI_EXPIRATION': True,
#}

#CORS_ORIGIN_WHITELIST = (
#    'localhost:8080',
#)

ROOT_URLCONF = 'hiscli.urls'

CRISPY_TEMPLATE_PACK = 'bootstrap3'
TEMPLATE_PATH = os.path.join(BASE_DIR, 'templates') #agregado basado en rango


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_PATH,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hiscli.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '<redigi>[nombre de la base de datos]', 
        'USER': '<redigi>[usuario de base de datos]', 
        'PASSWORD': '<redigi>[clave del usuario]', 
        'HOST': 'localhost',
        'PORT': '',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'es-AR'

TIME_ZONE = 'America/Argentina/Buenos_Aires'
DATE_INPUT_FORMATS = ('%d-%m-%Y')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static/') # tambien './static/'
STATIC_URL = '/static/'

LOGIN_REDIRECT_URL = 'hiscliapp/historiaclinica/'
LOGIN_URL = '/hiscliapp/login/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

ADMINS=[('Marcelo', '<redigi>[email de marcelo]')]
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER='<redigi>[cuenta de gmail]'
EMAIL_HOST_PASSWORD='<redigi>[clave de la aplicación en gmail ¡No es lo mismo que la clave del usuario!!]'
EMAIL_PORT= 465 
EMAIL_USE_TLS= False
EMAIL_USE_SSL= True
DEFAULT_FROM_EMAIL='<redigi>[tu cuenta]@gmail.com'

#PROCESO DE ALTA (hiscliapp_procesos_solicitar_clinica)
RD_EMAIL_HOST = "smtp.gmail.com"
RD_EMAIL_PORT = 465  # For SSL
RD_EMAIL_HOST_PASSWORD = '<redigi>[password de la aplicación]'
RD_EMAIL_SENDER = "<redigi>[tu cuenta]@gmail.com"
RD_EMAIL_SENDER_LOGIN = "<redigi>[tu cuenta]@gmail.com"

GRAPHENE = {
  'SCHEMA':'hiscli.schema.schema',
  'MIDDLEWARE': [
      'graphql_jwt.middleware.JSONWebTokenMiddleware',
  ]
}
#https://simpleisbetterthancomplex.com/tutorial/2017/02/21/how-to-add-recaptcha-to-django-site.html
GOOGLE_RECAPTCHA_SECRET_KEY = '<redigi>[secreto de recaptcha]'

#Logging
# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"},
        "require_debug_true": {"()": "django.utils.log.RequireDebugTrue"},
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "filters": ["require_debug_true"],
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": True,
        },
        "debugmsg": {"handlers": ["console"], "level": "DEBUG", "propagate": False},
    },
}